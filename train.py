# -*- coding: utf-8 -*-
"""YOLOv8 Training

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YFC8Bt46r6HswH-yspcLFKyqA-65qP0-
"""

configTraining = {
    "vibrio-training":{
        "model-training-name" : "Vibrio-eFishery",
        "roboflow-project" : "vibrio-model-mk2",
        "project-name": "Take Home Test Model-eFishery",
        "task-name": "YOLOv8 Training Model Vibrio",
        "task-id": "8fd718bdf6914166bb8f0ecfb9832a73"
    },
    "OCR-training":{
        "model-training-name" : "OCR-eFishery",
        "roboflow-project" : "document-model",
        "project-name": "Take Home Test Model-eFishery",
        "task-name": "YOLOv8 Training Model OCR",
        "task-id": "980e8d5c26984ddeb6d5d61c11d8c87a"
    }
}

yolov8Config = {
    "yolov8n":{
        "yaml-file": "yolov8n.yaml",
        "pt-weight": "yolov8n.pt"
    },
    "yolov8s":{
        "yaml-file": "yolov8s.yaml",
        "pt-weight": "yolov8s.pt"
    },
    "yolov8m":{
        "yaml-file": "yolov8m.yaml",
        "pt-weight": "yolov8m.pt"
    },
    "yolov8l":{
        "yaml-file": "yolov8l.yaml",
        "pt-weight": "yolov8l.pt"
    },
    "yolov8x":{
        "yaml-file": "yolov8x.yaml",
        "pt-weight": "yolov8x.pt"
    }
}

selectedTrainingName = "vibrio-training" #@param ["vibrio-training", "OCR-training"]
trainModel = "yolov8l" #@param ["yolov8n", "yolov8s", "yolov8m", "yolov8l", "yolov8x"]

configuredTraining = configTraining[selectedTrainingName]
modelTraining = yolov8Config[trainModel]

# Commented out IPython magic to ensure Python compatibility.
# Import OS module and Create folder base on user who use it
import os
import shutil
modelTrainingName = configuredTraining["model-training-name"]
dirs = "/content/drive/MyDrive/TrainingModel/YOLOv8"
os.makedirs(dirs, exist_ok=True)

# Download YOLOv8 Ultralytics and install requirements
# %pip install --upgrade clearml tensorboard ultralytics
# %pip install roboflow

from clearml import Task, Logger, browser_login
browser_login()
task = Task.init(project_name=configuredTraining['project-name'], task_name=configuredTraining['task-name'],
                 reuse_last_task_id=configuredTraining['task-id'])

from roboflow import Roboflow
versions = 6 #@param {type:"integer"}
rf = Roboflow(api_key="tfPZGFqYT5wWafUYvt4s")
project = rf.workspace("take-home-test").project(configuredTraining['roboflow-project'])
dataset = project.version(versions).download("yolov8")

from ultralytics import YOLO

epochs = 500 #@param {type:"integer"}
imgSize = 640 #@param {type:"integer"}
batch = 16 #@param {type:"integer"}
patience = 150 #@param {type:"integer"}

# Load a model
model = YOLO(modelTraining['yaml-file'])  # build a new model from YAML
model = YOLO(modelTraining['pt-weight'])  # load a pretrained model (recommended for training)
model = YOLO(modelTraining['yaml-file']).load(modelTraining['pt-weight'])  # build from YAML and transfer weights

# Train the model
model.train(data = os.path.join(dataset.location, "data.yaml"), epochs = epochs, 
            imgsz = imgSize, batch = batch, 
            device = 0, name = modelTrainingName,
            patience = patience)

task.close()

dirList = os.listdir(os.path.join(os.getcwd(), "runs/detect/{}".format(modelTrainingName)))
dirWeightList = os.listdir(os.path.join(os.getcwd(), "runs/detect/{}/weights".format(modelTrainingName)))

print("List file for {}".format(modelTrainingName))
for i in dirList:
  print(i)

print("List weight for {}".format(modelTrainingName))
for i in dirWeightList:
  print(i)

print("Copying file to drive....")
shutil.copytree(os.path.join(os.getcwd(), "runs/detect/"), os.path.join(dirs, modelTrainingName))